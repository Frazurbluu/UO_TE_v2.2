using System;
using System.Collections;
using System.Collections.Generic;
using Server;
using Server.Items;
using Server.Mobiles;
using Server.Targeting;
using Server.Spells;
using Server.Spells.Fourth;
using Server.Engines.CannedEvil;

namespace Server.Mobiles
{
	[CorpseName( "a dragon corpse" )]
	public class StygianDragon : BasePeerless
	{
	        public override bool AlwaysMurderer { get { return false; } }

		[Constructable]
		public StygianDragon () : base( AIType.AI_Mage, FightMode.Closest, 10, 1, 0.3, 0.5 )
		{
			Name = "a stygian dragon";
			Body = 826;
			BaseSoundID = 362;

			SetStr( 700, 720 );
			SetDex( 200, 250 );
			SetInt( 150, 180 );

			SetHits( 200000, 300000 );
			SetStam( 420, 431 );
			SetMana( 150, 180 );

			SetDamage( 33, 55 );

			SetDamageType( ResistanceType.Physical, 25 );
			SetDamageType( ResistanceType.Fire, 50 );
			SetDamageType( ResistanceType.Energy, 25 );

			SetResistance( ResistanceType.Physical, 80, 89 );
			SetResistance( ResistanceType.Fire, 85, 89 );
			SetResistance( ResistanceType.Cold, 60, 69 );
			SetResistance( ResistanceType.Poison, 80, 81 );
			SetResistance( ResistanceType.Energy, 85, 87 );


			SetSkill( SkillName.Anatomy, 100.0 );
			SetSkill( SkillName.MagicResist, 140.0, 152.2 );
			SetSkill( SkillName.Tactics, 110.0, 120.7 );
			SetSkill( SkillName.Wrestling, 115.0, 117.7 );

			Fame = 55000;
			Karma = -55000;

			VirtualArmor = 60;

			Tamable = false;

			PackGold( 8600, 12000 );

			PackResources( 12 );
			PackTalismans( 3 );
		}

		public override void GenerateLoot()
		{
			AddLoot( LootPack.AosSuperBoss, 8 );
			AddLoot( LootPack.Gems, 8 );
		}
		public override void OnDeath( Container c )
		{
			base.OnDeath( c );		

			if ( Utility.RandomDouble() < 0.15 )
				c.DropItem(new RewardScroll());
				c.DropItem(new RewardScroll());

		}

	        public override bool Unprovokable { get { return true; } }
	        public override bool BardImmune { get { return true; } }
        	public override bool ReacquireOnMovement{ get{ return true; } }
        	public override bool Uncalmable{ get{ return true; } }
        	public override Poison PoisonImmune{ get{ return Poison.Lethal; } }
	        public override bool GivesMinorArtifact { get { return true; } }
		public override bool HasBreath{ get{ return false; } } // fire breath enabled
		public override bool AutoDispel{ get{ return !Controlled; } }
		public override int TreasureMapLevel{ get{ return 5; } }
		public override int Meat{ get{ return 19; } }
		public override int Hides{ get{ return 30; } }
		public override HideType HideType{ get{ return HideType.Barbed; } }
		public override int Scales{ get{ return 7; } }
		public override ScaleType ScaleType{ get{ return ( Body == 12 ? ScaleType.Yellow : ScaleType.Red ); } }
		public override FoodType FavoriteFood{ get{ return FoodType.Meat; } }
		public override bool CanAngerOnTame { get { return true; } }

		public override WeaponAbility GetWeaponAbility()
		{
			if (50.0 >= Utility.RandomDouble())
			return WeaponAbility.Bladeweave;
			else
			return WeaponAbility.TalonStrike;

		}

		private DateTime m_Delay;

		public override void OnActionCombat()
		{
			if ( DateTime.Now > m_Delay )
			{
				if ( Utility.Random( 12 ) <= 8  )
				{
					Ability.FlameWave( this );
					m_Delay = DateTime.Now + TimeSpan.FromSeconds( Utility.RandomMinMax( 30, 45 ) );
				}
				else
				{
					Ability.CrimsonMeteor( this, 15 );
					m_Delay = DateTime.Now + TimeSpan.FromSeconds( Utility.RandomMinMax( 30, 45 ) );
				}
			}			

			base.OnActionCombat();
		}



		public StygianDragon( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write( (int) 1 );
		}

		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
			int version = reader.ReadInt();

		}
	}

		
}